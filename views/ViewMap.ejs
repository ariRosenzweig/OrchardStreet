<!DOCTYPE html>
<html>
<head>
    <style>
        /* Set the size of the div element that contains the map */
        #map {
            height: 800px;  /* The height is 400 pixels */
            width: 100%;  /* The width is the width of the web page */
        }
    </style>
</head>
<body>

<h3>Property Map</h3>
<!--The div element for the map -->



<div id="map"></div>
<div id="floating-panel">
    <input onclick="scrape();" type=button value="Scrape">
    <input onclick="trash();" type=button value="Delete  Pin">
    <input onclick="drawRec();" type=button value="Draw Rectangle">
</div>
<script src="https://code.jquery.com/jquery-latest.min.js"></script>
<script>
    // Initialize and add the map
    var ids = [], removeIds= [];
    var coordinates,detailsList = [];
    var removePinList = [];

    //Sends selected pin numbers to scrapper
    function scrape() {

        var filteredIds = [], filteredCoordinates = [];
        for(var i = 0; i< ids.length; i++){
            if(removeIds.includes(i))
                continue;
            filteredIds.push(ids[i]);
            filteredCoordinates.push(detailsList[i]);
        }
        console.log(filteredIds,filteredCoordinates);
        $.ajax({
            type: "POST",
            url: "/csvUpload/map",
            data: JSON.stringify(filteredIds+"$$$"+filteredCoordinates),
        }).done(function () {
            addImage();
        });
    }

    //Removes all red markers
    function trash(){
        for (var i = 0; i<removePinList.length;i++)
            removePinList[i].setMap(null);
    }
    //Refresh all markers to load the image
    function addImage(){
        window.alert("Scrapping Complete");
        google.maps.event.trigger(map, 'resize');
    }
    coordinates = "<%= x%>";
    var latlong = coordinates.split("xx");
    let map;
    var shiftPressed = false;
    let markerList = [];
    //init function
    function initMap() {
        // The map, center
        const mapCenterCordinates = {lat: 41.881832, lng: -87.623177};
        map = new google.maps.Map(
            document.getElementById('map'), {zoom: 10, center: mapCenterCordinates});

        let  i, latitude, longitude, xy, details = [], detailsArray = [], prop, infoWindowDetails = [];
        let RISInputDate, PropertyIdentificationNumber, DeedNumber, RedemptionExpDate;
        let RespondentFirstName1, RespondentLastName1, RespondentFirstName2, RespondentLastName2, PropertyAddress;
        let PropertyCity, PropertyState, PropertyZipCode, PropertyType, TaxYearOwed, CountyFIPS, DateofSale;
        let LienAmount, MultipleListingService, MailToFirstName, MailToLastName, MailToAddress, MailToState;
        let MailToZip, MailToPhone, FirstNamePurchaser, DoNotCall;

        console.log("Total valid Records: " + latlong.length)

        let infowindow = new google.maps.InfoWindow();
        for (i = 0; i < latlong.length; i++) {
            details = latlong[i].split("**");
            detailsList.push(details + "??");
            xy = details[0].split(",");
            details = details[1];
            console.log(details);
            detailsArray = details.split(',');
            RISInputDate = detailsArray[1];
            PropertyIdentificationNumber = detailsArray[2];
            DeedNumber = detailsArray[3];
            RedemptionExpDate = detailsArray[4];
            RespondentFirstName1 = detailsArray[5];
            RespondentLastName1 = detailsArray[6];
            RespondentFirstName2 = detailsArray[7];
            RespondentLastName2 = detailsArray[8];
            PropertyAddress = detailsArray[9];
            prop = PropertyIdentificationNumber.split(" ");
            prop = prop[0] + prop[1] + prop[2] + prop[3] + prop[4];
            //console.log(prop);
            ids.push(prop);
            PropertyCity = detailsArray[10];
            PropertyState = detailsArray[11];
            PropertyZipCode = detailsArray[12];
            PropertyType = detailsArray[13];
            TaxYearOwed = detailsArray[14];
            CountyFIPS = detailsArray[15];
            DateofSale = detailsArray[16];
            LienAmount = detailsArray[17].replace(':', ',');
            MultipleListingService = detailsArray[18];
            MailToFirstName = detailsArray[19];
            MailToLastName = detailsArray[20];
            MailToAddress = detailsArray[21];
            MailToState = detailsArray[22];
            MailToZip = detailsArray[23];
            MailToPhone = detailsArray[24];
            FirstNamePurchaser = detailsArray[25];
            DoNotCall = detailsArray[26];
            infoWindowDetails.push('<img src="http://gis1.cookcountyil.gov/cookViewer/PhotoProxy.aspx?' + prop + '=" style="max-height: 500px; max-width: 550px;">\n' +
                '\t<ul>\n' +
                '\t\t<li>Property Address:' + PropertyAddress + ' </li>\n' +
                '\t\t<li>Property City:' + PropertyCity + '</li>\n' +
                '\t\t<li>Property State:' + PropertyState + '</li>\n' +
                '\t\t<li>Property Zip Code:' + PropertyZipCode + '</li>\n' +
                '\t\t<li>Lien Amount:' + LienAmount + ' </li>\n' +
                '\t\t<li>Date of Sale:' + DateofSale + ' </li>\n' +
                '\t\t<li>Tax Year Owed:' + TaxYearOwed + ' </li>\n' +
                '\t\t<li>Redemption ExpDate:' + RedemptionExpDate + ' </li>\n' +
                '\t\t<li>First Name Purchaser:' + FirstNamePurchaser + ' </li>\n' +
                '\t\t<li>Respondent First Name 1:' + RespondentFirstName1 + '</li>\n' +
                '\t\t<li>Respondent Last Name 1:' + RespondentLastName1 + ' </li>\n' +
                '\t\t<li>Respondent First Name 2:' + RespondentFirstName2 + ' </li>\n' +
                '\t\t<li>Respondent Last Name 2:' + RespondentLastName2 + ' </li>\n' +
                '\t\t<li>Mail To Phone:' + MailToPhone + ' </li>\n' +
                '\t\t<li>RIS Input Date:' + RISInputDate + ' </li>\n' +
                '\t\t<li>Property Identification Number:' + PropertyIdentificationNumber + '</li>\n' +
                '\t\t<li>DeedNumber:' + DeedNumber + '</li>\n' +
                '\t\t<li>Property Type:' + PropertyType + ' </li>\n' +
                '\t\t<li>County FIPS:' + CountyFIPS + ' </li>\n' +
                '\t\t<li>Multiple Listing Service:' + MultipleListingService + ' </li>\n' +
                '\t\t<li>Mail To FirstName:' + MailToFirstName + ' </li>\n' +
                '\t\t<li>Mail To LastName:' + MailToLastName + ' </li>\n' +
                '\t\t<li>Mail To Address:' + MailToAddress + ' </li>\n' +
                '\t\t<li>Mail To State:' + MailToState + '</li>\n' +
                '\t\t<li>Mail To Zip:' + MailToZip + ' </li>\n' +
                '\t\t<li>Do Not Call:' + DoNotCall + ' </li>\n' +
                '\t</ul>\n' +
                '<img src="/Images/CookCounty/' + prop + '.png" width="97%" height="97%">'+
                '<img src="/Images/TaxDelinquent/' + prop + '.png" width="99%" height="99%" >' +
                '<img src="/Images/ClerkOfCourt/' + prop + '.png" width="99%" height="99%">' );


            if (xy.length == 4) {
                latitude = parseFloat(xy[2]);
                longitude = parseFloat(xy[1]);
            } else if (xy.length == 3) {
                latitude = parseFloat(xy[1]);
                longitude = parseFloat(xy[0]);
            } else
                continue;

            marker = new google.maps.Marker({
                position: new google.maps.LatLng(longitude, latitude),
                map: map,
                icon: {
                    url: 'https://www.google.com/mapfiles/marker_green.png'
                }

            });
            markerList.push(marker);
            google.maps.event.addListener(marker, 'click', (function (marker, i) {
                return function () {
                    infowindow.setContent(infoWindowDetails[i]);
                    infowindow.open(map, marker);
                }
            })(marker, i));

            google.maps.event.addListener(marker, 'rightclick', (function (marker, i) {
                return function () {
                    maintainMarkers(marker,i);
                    // marker.setMap(null);
                    // ids[i] = "0";
                }
            })(marker, i));
        }
        google.maps.event.addListener(marker, 'click', (function (marker, key) {
            return function () {
                infowindow.setContent(key);
                infowindow.open(map, marker);
            }
        })(marker, key));


    }

    function maintainMarkers(marker,i) {
        if (!removePinList.includes(marker)) {
            removePinList.push(marker);
            removeIds.push(i);
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');
            console.log(i);
        } else {
            removePinList.splice(removePinList.indexOf(marker), 1);
            removeIds.splice(removeIds.indexOf(i), 1);
            marker.setIcon('https://www.google.com/mapfiles/marker_green.png');
        }
    }
    //Rectangle drawing tool function
    function drawRec() {
        //Setting options for the Drawing Tool. In our case, enabling Polygon shape.
        let drawingManager = new google.maps.drawing.DrawingManager();
        drawingManager.setOptions({
            drawingMode : google.maps.drawing.OverlayType.RECTANGLE,
            drawingControl : true,
            drawingControlOptions : {
                position : google.maps.ControlPosition.TOP_CENTER,
                drawingModes : [ google.maps.drawing.OverlayType.RECTANGLE ]
            },
            rectangleOptions : {
                strokeColor : '#6c6c6c',
                strokeWeight : 3.5,
                fillColor : '#926239',
                fillOpacity : 0.6,
                editable: true,
                draggable: false
            }
        });

        // Loading the drawing Tool in the Map.
        drawingManager.setMap(map);
        google.maps.event.addListener(drawingManager, 'overlaycomplete', function(event) {
            var lng1 = event.overlay.getBounds().ia.j;
            var lat1 = event.overlay.getBounds().na.j;
            var lng2 = event.overlay.getBounds().ia.l;
            var lat2 = event.overlay.getBounds().na.l;
            var rectangleCordinates = [{lat:lat1,lng:lng1},{lat:lat2,lng:lng2},{lat:lat2,lng:lng2},{lat:lat1,lng:lng2}]
            var polygon = new google.maps.Polygon({paths:rectangleCordinates})
            event.overlay.setMap(null);
            drawingManager.setMap(null);
            for(i = 0; i< markerList.length;i++){
                point = markerList[i];
                var cordinates =  new google.maps.LatLng(point.position.lat(),point.position.lng());
                if(google.maps.geometry.poly.containsLocation(cordinates, polygon)){
                    console.log(i);
                    maintainMarkers(point,i);
                }
            }
        });
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBFf18v1TUapIPxyTkgTbybjgK672hwt-s&libraries=drawing&callback=initMap"
        async defer></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js" type="text/javascript"></script>

</body>



</html>
